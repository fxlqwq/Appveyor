# AppVeyor 构建配置 - Android 16 ISO 镜像构建
version: 1.0.{build}

# 使用 Ubuntu 2004 镜像
image: Ubuntu2004

# 环境变量
environment:
  ANDROID_VERSION: "16"
  ISO_NAME: "android-16-x86_64"
  CCACHE_DIR: /home/appveyor/.ccache
  USE_CCACHE: 1
  CCACHE_COMPRESS: 1
  
# 克隆设置
clone_depth: 1
clone_folder: /home/appveyor/android-build

# 初始化脚本
init:
  # 设置时区
  - sudo timedatectl set-timezone UTC
  # 增加虚拟内存
  - sudo fallocate -l 8G /swapfile
  - sudo chmod 600 /swapfile
  - sudo mkswap /swapfile
  - sudo swapon /swapfile

# 构建前准备
before_build:
  # 修复软件源问题 - 移除有问题的 PostgreSQL 仓库
  - sudo rm -f /etc/apt/sources.list.d/pgdg.list
  
  # 更新系统包
  - sudo apt-get update --fix-missing
  
  # 安装必要的构建工具和依赖
  - sudo apt-get install -y --no-install-recommends git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip python3 python3-pip python-is-python3 openjdk-8-jdk
  
  # 安装额外的构建依赖
  - sudo apt-get install -y --no-install-recommends ccache bc rsync squashfs-tools dosfstools mtools syslinux-utils genisoimage
  
  # 创建 bin 目录并安装 repo 工具
  - mkdir -p ~/bin
  - curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
  - chmod a+x ~/bin/repo
  - export PATH=~/bin:$PATH
  
  # 配置 Git
  - git config --global user.name "AppVeyor Android Build"
  - git config --global user.email "android-build@appveyor.com"
  
  # 配置 ccache
  - ccache -M 50G
  - ccache -z
  
  # 设置 Java 环境
  - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
  - export PATH=$JAVA_HOME/bin:$PATH
  
  # 创建构建目录
  - mkdir -p /home/appveyor/android-x86
  - cd /home/appveyor/android-x86

# 构建脚本
build_script:
  - cd /home/appveyor/android-x86
  
  # 检查磁盘空间
  - df -h
  
  # 初始化 Android-x86 源码仓库（使用较稳定的分支）
  - repo init -u https://github.com/android-x86/manifest.git -b oreo-x86 --depth=1
  
  # 同步源码（使用较少的并行作业以避免内存不足）
  - repo sync --force-sync --no-clone-bundle --no-tags -j4
  
  # 设置构建环境
  - source build/envsetup.sh
  
  # 选择构建目标
  - lunch android_x86_64-userdebug
  
  # 清理之前的构建产物
  - make clean
  
  # 开始构建 ISO 镜像
  - make -j$(nproc) iso_img V=1
  
  # 检查构建结果
  - ls -la out/target/product/x86_64/ || echo "构建目录不存在"
  
  # 重命名生成的ISO文件（如果存在）
  - |
    if [ -f out/target/product/x86_64/android_x86_64.iso ]; then
      mv out/target/product/x86_64/android_x86_64.iso out/target/product/x86_64/${ISO_NAME}-$(date +%Y%m%d).iso
      echo "ISO 文件已重命名为: ${ISO_NAME}-$(date +%Y%m%d).iso"
    else
      echo "错误: ISO 文件未生成"
      exit 1
    fi

# 构建后处理
after_build:
  - cd /home/appveyor/android-x86
  
  # 检查构建产物
  - ls -la out/target/product/x86_64/
  
  # 计算ISO文件的校验和
  - cd out/target/product/x86_64/
  - |
    for iso_file in *.iso; do
      if [ -f "$iso_file" ]; then
        sha256sum "$iso_file" > "${iso_file}.sha256"
        md5sum "$iso_file" > "${iso_file}.md5"
        ls -lh "$iso_file"
        echo "文件大小: $(du -h "$iso_file" | cut -f1)"
      fi
    done
  
  # 显示 ccache 统计
  - ccache -s

# 失败时的处理
on_failure:
  - echo "构建失败，显示构建日志..."
  - tail -n 100 /home/appveyor/android-x86/out/verbose.log.gz || echo "无详细日志"
  - df -h
  - free -h

# 构建产物
artifacts:
  - path: 'out/target/product/x86_64/*.iso'
    name: Android_ISO_Images
    type: File
  - path: 'out/target/product/x86_64/*.sha256'
    name: Android_ISO_Checksums
    type: File
  - path: 'out/target/product/x86_64/*.md5'
    name: Android_ISO_MD5
    type: File

# 部署设置（可选）
# deploy:
#   - provider: GitHub
#     auth_token:
#       secure: YOUR_ENCRYPTED_GITHUB_TOKEN_HERE
#     artifact: /.*\.iso/
#     draft: true
#     prerelease: true
#     on:
#       branch: main

# 缓存设置
cache:
  - /home/appveyor/.ccache -> appveyor.yml
  - /home/appveyor/.gradle -> appveyor.yml

# 构建矩阵
matrix:
  fast_finish: true

# 通知设置
notifications:
  - provider: Email
    to:
      - fxlqwq@example.com  # 替换为你的邮箱
    on_build_success: true
    on_build_failure: true
    on_build_status_changed: true

# 构建超时设置（6小时）
build:
  verbosity: minimal
