# AppVeyor 构建配置 - Android 16 ISO 镜像构建
version: 1.0.{build}

# 使用 Ubuntu 2004 镜像
image: Ubuntu2404

# 环境变量
environment:
  ANDROID_VERSION: "16"
  ISO_NAME: "android-16-x86_64"
  CCACHE_DIR: /home/appveyor/.ccache
  USE_CCACHE: 1
  CCACHE_COMPRESS: 1
  DEBIAN_FRONTEND: noninteractive
  
# 克隆设置
clone_depth: 1
clone_folder: /home/appveyor/android-build

# 初始化脚本
init:
  # 设置时区
  - sudo timedatectl set-timezone UTC
  
  # 完全清理所有可能有问题的软件源
  - sudo rm -rf /etc/apt/sources.list.d/*
  - sudo rm -rf /var/lib/apt/lists/*
  
  # 重新创建基础软件源列表
  - |
    sudo tee /etc/apt/sources.list > /dev/null <<EOF
    deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse
    deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse
    deb http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
    deb http://security.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse
    EOF
  
  # 增加虚拟内存
  - sudo fallocate -l 8G /swapfile
  - sudo chmod 600 /swapfile
  - sudo mkswap /swapfile
  - sudo swapon /swapfile

# 构建前准备
before_build:
  # 清理并更新包索引
  - sudo apt-get clean
  - sudo apt-get update
  
  # 安装基础构建工具
  - sudo apt-get install -y --no-install-recommends software-properties-common apt-utils
  
  # 安装 Android 构建所需的基础工具
  - sudo apt-get install -y --no-install-recommends git-core curl wget gnupg2 lsb-release
  
  # 安装编译工具链
  - sudo apt-get install -y --no-install-recommends build-essential gcc g++ make cmake
  
  # 安装 Android 特定的构建依赖
  - sudo apt-get install -y --no-install-recommends flex bison gperf zip unzip
  
  # 安装多架构支持
  - sudo apt-get install -y --no-install-recommends gcc-multilib g++-multilib libc6-dev-i386
  
  # 安装开发库
  - sudo apt-get install -y --no-install-recommends zlib1g-dev lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc
  
  # 安装 Python 和 Java
  - sudo apt-get install -y --no-install-recommends python3 python3-pip python-is-python3
  - sudo apt-get install -y --no-install-recommends openjdk-8-jdk
  
  # 安装 ISO 构建工具
  - sudo apt-get install -y --no-install-recommends ccache bc rsync squashfs-tools dosfstools mtools syslinux-utils genisoimage xorriso
  
  # 创建 bin 目录并安装 repo 工具
  - mkdir -p ~/bin
  - curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
  - chmod a+x ~/bin/repo
  - export PATH=~/bin:$PATH
  
  # 配置 Git
  - git config --global user.name "AppVeyor Android Build"
  - git config --global user.email "android-build@appveyor.com"
  - git config --global color.ui false
  
  # 配置 ccache
  - ccache -M 30G
  - ccache -z
  
  # 设置环境变量
  - echo 'export PATH=~/bin:$PATH' >> ~/.bashrc
  - echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> ~/.bashrc
  - echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc
  - echo 'export USE_CCACHE=1' >> ~/.bashrc
  - echo 'export CCACHE_DIR=/home/appveyor/.ccache' >> ~/.bashrc
  - source ~/.bashrc
  
  # 检查工具版本
  - java -version
  - python3 --version
  - git --version
  - ccache --version
  
  # 创建构建目录
  - mkdir -p /home/appveyor/android-x86
  - cd /home/appveyor/android-x86

# 构建脚本
build_script:
  - cd /home/appveyor/android-x86
  
  # 设置环境变量
  - export PATH=~/bin:$PATH
  - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
  - export PATH=$JAVA_HOME/bin:$PATH
  - export USE_CCACHE=1
  - export CCACHE_DIR=/home/appveyor/.ccache
  
  # 检查磁盘空间
  - df -h
  - free -h
  
  # 初始化 Android-x86 源码仓库
  - echo "正在初始化 repo..."
  - repo init -u https://github.com/android-x86/manifest.git -b oreo-x86 --depth=1
  
  # 同步源码
  - echo "正在同步源码..."
  - repo sync --force-sync --no-clone-bundle --no-tags -j2 --current-branch
  
  # 检查源码是否同步成功
  - ls -la
  - echo "源码同步完成"
  
  # 设置构建环境
  - echo "设置构建环境..."
  - source build/envsetup.sh
  
  # 选择构建目标
  - echo "选择构建目标..."
  - lunch android_x86_64-userdebug
  
  # 清理之前的构建产物
  - echo "清理构建环境..."
  - make clean
  
  # 检查构建环境
  - echo "检查构建环境..."
  - which java
  - which python
  - echo $JAVA_HOME
  - echo $PATH
  
  # 开始构建 ISO 镜像
  - echo "开始构建 ISO 镜像..."
  - make -j2 iso_img
  
  # 检查构建结果
  - echo "检查构建结果..."
  - find out/target/product/x86_64/ -name "*.iso" -ls || echo "未找到 ISO 文件"
  
  # 重命名生成的ISO文件（如果存在）
  - |
    cd out/target/product/x86_64/
    for iso_file in *.iso; do
      if [ -f "$iso_file" ]; then
        new_name="${ISO_NAME}-$(date +%Y%m%d).iso"
        mv "$iso_file" "$new_name"
        echo "ISO 文件已重命名为: $new_name"
        ls -lh "$new_name"
      fi
    done

# 构建后处理
after_build:
  - cd /home/appveyor/android-x86
  
  # 检查构建产物
  - echo "最终构建产物:"
  - find out/target/product/x86_64/ -name "*.iso" -exec ls -lh {} \; || echo "未找到 ISO 文件"
  
  # 计算ISO文件的校验和
  - cd out/target/product/x86_64/
  - |
    for iso_file in *.iso; do
      if [ -f "$iso_file" ]; then
        echo "为 $iso_file 生成校验和..."
        sha256sum "$iso_file" > "${iso_file}.sha256"
        md5sum "$iso_file" > "${iso_file}.md5"
        echo "文件信息:"
        ls -lh "$iso_file"
        echo "SHA256: $(cat ${iso_file}.sha256)"
        echo "MD5: $(cat ${iso_file}.md5)"
      fi
    done
  
  # 显示 ccache 统计
  - ccache -s

# 失败时的处理
on_failure:
  - echo "=== 构建失败诊断信息 ==="
  - echo "当前目录内容:"
  - pwd
  - ls -la
  
  - echo "=== 磁盘使用情况 ==="
  - df -h
  
  - echo "=== 内存使用情况 ==="
  - free -h
  
  - echo "=== 环境变量 ==="
  - env | grep -E "(JAVA|ANDROID|PATH|CCACHE)" || echo "未找到相关环境变量"
  
  - echo "=== 检查构建日志 ==="
  - find /home/appveyor/android-x86 -name "*.log" -type f -exec echo "=== {} ===" \; -exec tail -50 {} \; || echo "未找到构建日志"
  
  - echo "=== 检查错误信息 ==="
  - dmesg | tail -20 || echo "无系统错误信息"

# 构建产物
artifacts:
  - path: 'out/target/product/x86_64/*.iso'
    name: Android_ISO_Images
    type: File
  - path: 'out/target/product/x86_64/*.sha256'
    name: Android_ISO_Checksums
    type: File
  - path: 'out/target/product/x86_64/*.md5'
    name: Android_ISO_MD5
    type: File

# 缓存设置
cache:
  - /home/appveyor/.ccache -> appveyor.yml

# 构建矩阵
matrix:
  fast_finish: true

# 通知设置
notifications:
  - provider: Email
    to:
      - fxlqwq@example.com
    on_build_success: true
    on_build_failure: true
    on_build_status_changed: true

# 构建超时设置（6小时）
build:
  verbosity: minimal
