# AppVeyor 构建配置 - Android x86 ISO 镜像构建
version: 1.0.{build}

# 使用 Ubuntu 22.04 镜像 (更大存储空间)
image: Ubuntu2204

# 设置构建模式为脚本模式
build: off

# 环境变量
environment:
  ANDROID_VERSION: "froyo"
  ISO_NAME: "android-froyo-x86_64"
  CCACHE_DIR: /home/appveyor/.ccache
  USE_CCACHE: 1
  CCACHE_COMPRESS: 1
  DEBIAN_FRONTEND: noninteractive
  
# 克隆设置
clone_depth: 1
clone_folder: /home/appveyor/android-build

# 初始化脚本
init:
  # 设置时区
  - sudo timedatectl set-timezone UTC
  
  # 完全清理所有可能有问题的软件源
  - sudo rm -rf /etc/apt/sources.list.d/*
  - sudo rm -rf /var/lib/apt/lists/*
  
  # 重新创建基础软件源列表 (Ubuntu 22.04 Jammy)
  - |
    sudo tee /etc/apt/sources.list > /dev/null <<EOF
    deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
    deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
    deb http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
    deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
    EOF
  
  # 增加虚拟内存
  - sudo fallocate -l 16G /swapfile
  - sudo chmod 600 /swapfile
  - sudo mkswap /swapfile
  - sudo swapon /swapfile

# 安装阶段
install:
  # 清理并更新包索引
  - sudo apt-get clean
  - sudo apt-get update
  
  # 安装基础构建工具
  - sudo apt-get install -y --no-install-recommends software-properties-common apt-utils
  
  # 安装 Android 构建所需的基础工具
  - sudo apt-get install -y --no-install-recommends git curl wget gnupg2 lsb-release ca-certificates
  
  # 安装编译工具链
  - sudo apt-get install -y --no-install-recommends build-essential gcc g++ make cmake
  
  # 安装 Android 特定的构建依赖
  - sudo apt-get install -y --no-install-recommends flex bison gperf zip unzip
  
  # 安装多架构支持 (Ubuntu 22.04 版本)
  - sudo apt-get install -y --no-install-recommends gcc-multilib g++-multilib 
  
  # 尝试安装 32 位库支持
  - sudo dpkg --add-architecture i386
  - sudo apt-get update
  - sudo apt-get install -y --no-install-recommends libc6-dev-i386 || echo "32位库安装失败，继续..."
  
  # 安装开发库
  - sudo apt-get install -y --no-install-recommends zlib1g-dev libncurses5-dev libx11-dev libxml2-utils xsltproc
  
  # 安装 Python 和 Java 8 (Android 构建推荐)
  - sudo apt-get install -y --no-install-recommends python3 python3-pip python-is-python3
  - sudo apt-get install -y --no-install-recommends openjdk-8-jdk || sudo apt-get install -y --no-install-recommends openjdk-11-jdk
  
  # 安装 ISO 构建工具
  - sudo apt-get install -y --no-install-recommends ccache bc rsync squashfs-tools dosfstools mtools syslinux-utils genisoimage xorriso
  
  # 创建 bin 目录并安装 repo 工具
  - mkdir -p ~/bin
  - curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
  - chmod a+x ~/bin/repo
  - export PATH=~/bin:$PATH
  
  # 配置 Git
  - git config --global user.name "AppVeyor Android Build"
  - git config --global user.email "android-build@appveyor.com"
  - git config --global color.ui false
  - git config --global init.defaultBranch main
  
  # 配置 ccache
  - ccache -M 50G
  - ccache -z
  
  # 检测并设置 Java 环境
  - |
    if [ -d "/usr/lib/jvm/java-8-openjdk-amd64" ]; then
      export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
    elif [ -d "/usr/lib/jvm/java-11-openjdk-amd64" ]; then
      export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    else
      export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")
    fi
    echo "JAVA_HOME 设置为: $JAVA_HOME"
  
  # 设置环境变量
  - echo 'export PATH=~/bin:$PATH' >> ~/.bashrc
  - |
    if [ -d "/usr/lib/jvm/java-8-openjdk-amd64" ]; then
      echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> ~/.bashrc
    elif [ -d "/usr/lib/jvm/java-11-openjdk-amd64" ]; then
      echo 'export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> ~/.bashrc
    fi
  - echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc
  - echo 'export USE_CCACHE=1' >> ~/.bashrc
  - echo 'export CCACHE_DIR=/home/appveyor/.ccache' >> ~/.bashrc
  - source ~/.bashrc
  
  # 检查工具版本
  - java -version || echo "Java 未正确安装"
  - python3 --version
  - git --version
  - ccache --version
  - echo "磁盘空间检查:"
  - df -h
  
  # 创建构建目录
  - mkdir -p /home/appveyor/android-x86

# 测试脚本阶段（我们在这里进行实际构建）
test_script:
  - cd /home/appveyor/android-x86
  
  # 设置环境变量
  - export PATH=~/bin:$PATH
  - |
    if [ -d "/usr/lib/jvm/java-8-openjdk-amd64" ]; then
      export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
    elif [ -d "/usr/lib/jvm/java-11-openjdk-amd64" ]; then
      export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    else
      export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
    fi
  - export PATH=$JAVA_HOME/bin:$PATH
  - export USE_CCACHE=1
  - export CCACHE_DIR=/home/appveyor/.ccache
  
  # 检查磁盘空间和系统资源
  - echo "=== 系统资源检查 ==="
  - df -h
  - free -h
  - nproc
  - echo "Java版本 检查中..."
  - java -version 2>&1 | head -1
  - echo "JAVA_HOME 路径为:"
  - echo $JAVA_HOME
  
  # 初始化 Android-x86 源码仓库 (使用 Android 2.2.3_r2.1 - Froyo)
  - echo "正在初始化 repo..."
  - repo init -u https://github.com/android-x86/manifest.git -b android-2.2.3_r2.1 --depth=1 --partial-clone
  
  # 同步源码
  - echo "正在同步源码..."
  - repo sync --force-sync --no-clone-bundle --no-tags -j2 --current-branch --fail-fast
  
  # 检查源码是否同步成功
  - ls -la
  - echo "源码同步完成，检查关键目录:"
  - ls -la build/ || echo "build目录不存在"
  
  # 设置构建环境
  - echo "设置构建环境..."
  - source build/envsetup.sh
  
  # 选择构建目标 (老版本可能使用不同的目标名称)
  - echo "选择构建目标..."
  - lunch generic_x86-eng || lunch generic-eng
  
  # 清理之前的构建产物
  - echo "清理构建环境..."
  - make clean || echo "清理失败，继续..."
  
  # 检查构建环境
  - echo "=== 构建环境检查 ==="
  - which java
  - which python
  - echo "JAVA_HOME 为:"
  - echo $JAVA_HOME
  - echo "PATH 为:"
  - echo $PATH
  - echo "CPU 核心数为:"
  - nproc
  
  # 开始构建 ISO 镜像 (使用更少的并行作业)
  - echo "开始构建 ISO 镜像..."
  - make -j1 iso_img || make -j1 installclean && make -j1
  
  # 检查构建结果
  - echo "检查构建结果..."
  - find out/ -name "*.iso" -ls 2>/dev/null || echo "未找到 ISO 文件"
  - find out/ -name "*.img" -ls 2>/dev/null || echo "未找到 IMG 文件"
  
  # 重命名生成的ISO/IMG文件（如果存在）
  - |
    for iso_file in $(find out/ -name "*.iso" 2>/dev/null); do
      if [ -f "$iso_file" ]; then
        dir_name=$(dirname "$iso_file")
        new_name="${dir_name}/${ISO_NAME}-$(date +%Y%m%d).iso"
        mv "$iso_file" "$new_name"
        echo "ISO 文件已重命名为: $new_name"
        ls -lh "$new_name"
      fi
    done

# 构建后处理
after_test:
  - cd /home/appveyor/android-x86
  
  # 检查构建产物
  - echo "=== 最终构建产物 ==="
  - find out/ -name "*.iso" -exec ls -lh {} \; 2>/dev/null || echo "未找到 ISO 文件"
  - find out/ -name "*.img" -exec ls -lh {} \; 2>/dev/null || echo "未找到 IMG 文件"
  
  # 计算ISO文件的校验和
  - |
    for iso_file in $(find out/ -name "*.iso" 2>/dev/null); do
      if [ -f "$iso_file" ]; then
        echo "为 $iso_file 生成校验和..."
        sha256sum "$iso_file" > "${iso_file}.sha256"
        md5sum "$iso_file" > "${iso_file}.md5"
        echo "文件信息:"
        ls -lh "$iso_file"
        echo "SHA256:"
        cat ${iso_file}.sha256
        echo "MD5:"
        cat ${iso_file}.md5
      fi
    done
  
  # 显示 ccache 统计
  - ccache -s || echo "ccache 统计获取失败"

# 失败时的处理
on_failure:
  - echo "=== 构建失败诊断信息 ==="
  - echo "当前目录:"
  - pwd
  - ls -la
  
  - echo "=== 磁盘使用情况 ==="
  - df -h
  
  - echo "=== 内存使用情况 ==="
  - free -h
  
  - echo "=== Java 信息 ==="
  - java -version 2>&1 || echo "Java 未安装或配置错误"
  - echo "JAVA_HOME 环境变量:"
  - echo $JAVA_HOME
  
  - echo "=== 最近的系统日志 ==="
  - sudo dmesg | tail -20 2>/dev/null || echo "无法读取系统日志"
  
  - echo "=== 检查构建日志 ==="
  - find /home/appveyor/android-x86 -name "*.log" -type f -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null || echo "未找到构建日志"

# 构建产物
artifacts:
  - path: 'android-x86/out/**/*.iso'
    name: Android_ISO_Images
    type: File
  - path: 'android-x86/out/**/*.sha256'
    name: Android_ISO_Checksums
    type: File
  - path: 'android-x86/out/**/*.md5'
    name: Android_ISO_MD5
    type: File
  - path: 'android-x86/out/**/*.img'
    name: Android_IMG_Images
    type: File

# 缓存设置
cache:
  - /home/appveyor/.ccache -> appveyor.yml

# 构建矩阵
matrix:
  fast_finish: true

# 通知设置
notifications:
  - provider: Email
    to:
      - fxlqwq@example.com
    on_build_success: true
    on_build_failure: true
    on_build_status_changed: true

# 构建超时设置（8小时）
max_jobs: 1
